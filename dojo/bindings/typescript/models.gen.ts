// Generated by dojo-bindgen on Thu, 11 Apr 2024 21:01:56 +0000. Do not modify this file manually.
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<
            ReturnType<typeof defineContractComponents>
        >;



// Type definition for `token::components::security::initializable::InitializableModel` struct
export interface InitializableModel {
    token: BigInt;
    initialized: Boolean;
    
}

export const InitializableModelDefinition = {
    token: RecsType.BigInt,
    initialized: RecsType.Boolean,
    
};


// Type definition for `pistols::models::models::Duelist` struct
export interface Duelist {
    address: BigInt;
    name: BigInt;
    profile_pic: Number;
    total_duels: Number;
    total_wins: Number;
    total_losses: Number;
    total_draws: Number;
    total_honour: Number;
    honour: Number;
    timestamp: Number;
    
}

export const DuelistDefinition = {
    address: RecsType.BigInt,
    name: RecsType.BigInt,
    profile_pic: RecsType.Number,
    total_duels: RecsType.Number,
    total_wins: RecsType.Number,
    total_losses: RecsType.Number,
    total_draws: RecsType.Number,
    total_honour: RecsType.Number,
    honour: RecsType.Number,
    timestamp: RecsType.Number,
    
};


// Type definition for `pistols::models::config::Config` struct
export interface Config {
    key: Number;
    initialized: Boolean;
    owner_address: BigInt;
    treasury_address: BigInt;
    paused: Boolean;
    
}

export const ConfigDefinition = {
    key: RecsType.Number,
    initialized: RecsType.Boolean,
    owner_address: RecsType.BigInt,
    treasury_address: RecsType.BigInt,
    paused: RecsType.Boolean,
    
};


// Type definition for `pistols::models::models::Challenge` struct
export interface Challenge {
    duel_id: BigInt;
    duelist_a: BigInt;
    duelist_b: BigInt;
    message: BigInt;
    state: Number;
    round_number: Number;
    winner: Number;
    timestamp_start: Number;
    timestamp_end: Number;
    
}

export const ChallengeDefinition = {
    duel_id: RecsType.BigInt,
    duelist_a: RecsType.BigInt,
    duelist_b: RecsType.BigInt,
    message: RecsType.BigInt,
    state: RecsType.Number,
    round_number: RecsType.Number,
    winner: RecsType.Number,
    timestamp_start: RecsType.Number,
    timestamp_end: RecsType.Number,
    
};


// Type definition for `core::integer::u256` struct
export interface U256 {
    low: BigInt;
    high: BigInt;
    
}

export const U256Definition = {
    low: RecsType.BigInt,
    high: RecsType.BigInt,
    
};

// Type definition for `pistols::models::coins::Coin` struct
export interface Coin {
    key: Number;
    contract_address: BigInt;
    description: BigInt;
    fee_min: U256;
    fee_pct: Number;
    enabled: Boolean;
    
}

export const CoinDefinition = {
    key: RecsType.Number,
    contract_address: RecsType.BigInt,
    description: RecsType.BigInt,
    fee_min: U256Definition,
    fee_pct: RecsType.Number,
    enabled: RecsType.Boolean,
    
};


// Type definition for `pistols::models::models::Shot` struct
export interface Shot {
    hash: Number;
    salt: Number;
    action: Number;
    chance_crit: Number;
    chance_hit: Number;
    dice_crit: Number;
    dice_hit: Number;
    damage: Number;
    block: Number;
    win: Number;
    wager: Number;
    health: Number;
    honour: Number;
    
}

export const ShotDefinition = {
    hash: RecsType.Number,
    salt: RecsType.Number,
    action: RecsType.Number,
    chance_crit: RecsType.Number,
    chance_hit: RecsType.Number,
    dice_crit: RecsType.Number,
    dice_hit: RecsType.Number,
    damage: RecsType.Number,
    block: RecsType.Number,
    win: RecsType.Number,
    wager: RecsType.Number,
    health: RecsType.Number,
    honour: RecsType.Number,
    
};

// Type definition for `pistols::models::models::Round` struct
export interface Round {
    duel_id: BigInt;
    round_number: Number;
    state: Number;
    shot_a: Shot;
    shot_b: Shot;
    
}

export const RoundDefinition = {
    duel_id: RecsType.BigInt,
    round_number: RecsType.Number,
    state: RecsType.Number,
    shot_a: ShotDefinition,
    shot_b: ShotDefinition,
    
};


// Type definition for `core::integer::u256` struct
export interface U256 {
    low: BigInt;
    high: BigInt;
    
}

export const U256Definition = {
    low: RecsType.BigInt,
    high: RecsType.BigInt,
    
};

// Type definition for `token::components::token::erc20::erc20_balance::ERC20BalanceModel` struct
export interface ERC20BalanceModel {
    token: BigInt;
    account: BigInt;
    amount: U256;
    
}

export const ERC20BalanceModelDefinition = {
    token: RecsType.BigInt,
    account: RecsType.BigInt,
    amount: U256Definition,
    
};


// Type definition for `core::integer::u256` struct
export interface U256 {
    low: BigInt;
    high: BigInt;
    
}

export const U256Definition = {
    low: RecsType.BigInt,
    high: RecsType.BigInt,
    
};

// Type definition for `token::components::token::erc20::erc20_metadata::ERC20MetadataModel` struct
export interface ERC20MetadataModel {
    token: BigInt;
    name: BigInt;
    symbol: BigInt;
    decimals: Number;
    total_supply: U256;
    
}

export const ERC20MetadataModelDefinition = {
    token: RecsType.BigInt,
    name: RecsType.BigInt,
    symbol: RecsType.BigInt,
    decimals: RecsType.Number,
    total_supply: U256Definition,
    
};


// Type definition for `core::integer::u256` struct
export interface U256 {
    low: BigInt;
    high: BigInt;
    
}

export const U256Definition = {
    low: RecsType.BigInt,
    high: RecsType.BigInt,
    
};

// Type definition for `token::components::token::erc20::erc20_allowance::ERC20AllowanceModel` struct
export interface ERC20AllowanceModel {
    token: BigInt;
    owner: BigInt;
    spender: BigInt;
    amount: U256;
    
}

export const ERC20AllowanceModelDefinition = {
    token: RecsType.BigInt,
    owner: RecsType.BigInt,
    spender: RecsType.BigInt,
    amount: U256Definition,
    
};


// Type definition for `core::integer::u256` struct
export interface U256 {
    low: BigInt;
    high: BigInt;
    
}

export const U256Definition = {
    low: RecsType.BigInt,
    high: RecsType.BigInt,
    
};

// Type definition for `pistols::models::models::Wager` struct
export interface Wager {
    duel_id: BigInt;
    coin: Number;
    value: U256;
    fee: U256;
    
}

export const WagerDefinition = {
    duel_id: RecsType.BigInt,
    coin: RecsType.Number,
    value: U256Definition,
    fee: U256Definition,
    
};


// Type definition for `pistols::models::models::Pact` struct
export interface Pact {
    pair: BigInt;
    duel_id: BigInt;
    
}

export const PactDefinition = {
    pair: RecsType.BigInt,
    duel_id: RecsType.BigInt,
    
};


export function defineContractComponents(world: World) {
    return {

        // Model definition for `token::components::security::initializable::InitializableModel` model
        InitializableModel: (() => {
            return defineComponent(
                world,
                {
                    token: RecsType.BigInt,
                    initialized: RecsType.Boolean,
                },
                {
                    metadata: {
                        name: "InitializableModel",
                        types: ["ContractAddress", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pistols::models::models::Duelist` model
        Duelist: (() => {
            return defineComponent(
                world,
                {
                    address: RecsType.BigInt,
                    name: RecsType.BigInt,
                    profile_pic: RecsType.Number,
                    total_duels: RecsType.Number,
                    total_wins: RecsType.Number,
                    total_losses: RecsType.Number,
                    total_draws: RecsType.Number,
                    total_honour: RecsType.Number,
                    honour: RecsType.Number,
                    timestamp: RecsType.Number,
                },
                {
                    metadata: {
                        name: "Duelist",
                        types: ["ContractAddress", "felt252", "u8", "u16", "u16", "u16", "u16", "u32", "u8", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pistols::models::config::Config` model
        Config: (() => {
            return defineComponent(
                world,
                {
                    key: RecsType.Number,
                    initialized: RecsType.Boolean,
                    owner_address: RecsType.BigInt,
                    treasury_address: RecsType.BigInt,
                    paused: RecsType.Boolean,
                },
                {
                    metadata: {
                        name: "Config",
                        types: ["u8", "bool", "ContractAddress", "ContractAddress", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pistols::models::models::Challenge` model
        Challenge: (() => {
            return defineComponent(
                world,
                {
                    duel_id: RecsType.BigInt,
                    duelist_a: RecsType.BigInt,
                    duelist_b: RecsType.BigInt,
                    message: RecsType.BigInt,
                    state: RecsType.Number,
                    round_number: RecsType.Number,
                    winner: RecsType.Number,
                    timestamp_start: RecsType.Number,
                    timestamp_end: RecsType.Number,
                },
                {
                    metadata: {
                        name: "Challenge",
                        types: ["u128", "ContractAddress", "ContractAddress", "felt252", "u8", "u8", "u8", "u64", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pistols::models::coins::Coin` model
        Coin: (() => {
            return defineComponent(
                world,
                {
                    key: RecsType.Number,
                    contract_address: RecsType.BigInt,
                    description: RecsType.BigInt,
                    fee_min: U256Definition,
                    fee_pct: RecsType.Number,
                    enabled: RecsType.Boolean,
                },
                {
                    metadata: {
                        name: "Coin",
                        types: ["u8", "ContractAddress", "felt252", "u8", "bool"],
                        customTypes: ["U256"],
                    },
                }
            );
        })(),

        // Model definition for `pistols::models::models::Round` model
        Round: (() => {
            return defineComponent(
                world,
                {
                    duel_id: RecsType.BigInt,
                    round_number: RecsType.Number,
                    state: RecsType.Number,
                    shot_a: ShotDefinition,
                    shot_b: ShotDefinition,
                },
                {
                    metadata: {
                        name: "Round",
                        types: ["u128", "u8", "u8"],
                        customTypes: ["Shot", "Shot"],
                    },
                }
            );
        })(),

        // Model definition for `pistols::models::models::Wager` model
        Wager: (() => {
            return defineComponent(
                world,
                {
                    duel_id: RecsType.BigInt,
                    coin: RecsType.Number,
                    value: U256Definition,
                    fee: U256Definition,
                },
                {
                    metadata: {
                        name: "Wager",
                        types: ["u128", "u8"],
                        customTypes: ["U256", "U256"],
                    },
                }
            );
        })(),

        // Model definition for `pistols::models::models::Pact` model
        Pact: (() => {
            return defineComponent(
                world,
                {
                    pair: RecsType.BigInt,
                    duel_id: RecsType.BigInt,
                },
                {
                    metadata: {
                        name: "Pact",
                        types: ["u128", "u128"],
                        customTypes: [],
                    },
                }
            );
        })(),
    };
}
